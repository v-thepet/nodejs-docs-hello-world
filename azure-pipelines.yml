trigger:
  branches:
    include:
    - main

variables:
- name: azureSubscription
  value: '94a52f63-fb40-4989-926a-b84750d87775'
- name: webAppName
  value: 'kind-forest-f137b7726e2440ba85296b17abb84ab5'
- name: resourceGroup
  value: 'v-thepet_rg_3874'
- name: environmentName
  value: 'JSenv'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    workspace:
      clean: all
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'
    - task: CmdLine@2
      displayName: 'npm install, build and test'
      inputs:
        script: |
          npm install
          npm run build --if-present
          npm run test --if-present
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@0
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        artifactName: drop

- stage: Deploy
  displayName: Rolling deploy to Linux VMs
  dependsOn:
  - Build
  condition: succeeded()
  jobs:
  - deployment: RollingDeploy
    displayName: Rolling deploy to Linux VMs via az CLI
    environment:
      name: $(environmentName)
      resourceType: VirtualMachine
    strategy:
      rolling:
        maxParallel: 2 # change to 2 if you want both VMs in parallel
        preDeploy:
          steps:
          - download: current
            artifact: drop
          - script: |
              echo "Pre-deploy step on $(hostname)"
        deploy:
          steps:
          - script: |
              echo "Deploying zip package to Azure Web App from $(hostname)"
              az webapp deployment source config-zip \
                --resource-group $(resourceGroup) \
                --name $(webAppName) \
                --src $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
            displayName: 'Deploy ZIP package via az CLI'
        routeTraffic:
          steps:
          - script: |
              echo "Routing traffic on $(hostname)"
        postRouteTraffic:
          steps:
          - script: |
              echo "Post-route health check on $(hostname)"
        on:
          failure:
            steps:
            - script: echo "Deployment failed on $(hostname)"
          success:
            steps:
            - script: echo "Deployment succeeded on $(hostname)"

